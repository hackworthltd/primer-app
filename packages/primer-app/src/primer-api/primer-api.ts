/**
 * Generated by orval v6.6.4 üç∫
 * Do not edit manually.
 * Primer backend API
 * A backend service implementing a pedagogic functional programming language.
 * OpenAPI spec version: 0.7
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "react-query";
import type {
  Uuid,
  InitialApp,
  PaginatedSession,
  GetSessionListParams,
  Prog,
  GetApiProgramParams,
} from "./model";
import { useCustomInstance, ErrorType } from "./mutator/use-custom-instance";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

/**
 * @summary Create a new session
 */
export const useCreateSessionHook = () => {
  const createSession = useCustomInstance<Uuid>();

  return (initialApp: InitialApp) => {
    return createSession({
      url: `/api/sessions`,
      method: "post",
      data: initialApp,
    });
  };
};

export const useCreateSession = <
  TError = ErrorType<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<ReturnType<typeof useCreateSessionHook>>,
    TError,
    { data: InitialApp },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options || {};

  const createSession = useCreateSessionHook();

  const mutationFn: MutationFunction<
    AsyncReturnType<ReturnType<typeof useCreateSessionHook>>,
    { data: InitialApp }
  > = (props) => {
    const { data } = props || {};

    return createSession(data);
  };

  return useMutation<
    AsyncReturnType<typeof createSession>,
    TError,
    { data: InitialApp },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * @summary List sessions
 */
export const useGetSessionListHook = () => {
  const getSessionList = useCustomInstance<PaginatedSession>();

  return (params?: GetSessionListParams) => {
    return getSessionList({ url: `/api/sessions`, method: "get", params });
  };
};

export const getGetSessionListQueryKey = (params?: GetSessionListParams) => [
  `/api/sessions`,
  ...(params ? [params] : []),
];

export const useGetSessionList = <
  TData = AsyncReturnType<ReturnType<typeof useGetSessionListHook>>,
  TError = ErrorType<void>
>(
  params?: GetSessionListParams,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<ReturnType<typeof useGetSessionListHook>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetSessionListQueryKey(params);

  const getSessionList = useGetSessionListHook();

  const queryFn: QueryFunction<
    AsyncReturnType<ReturnType<typeof useGetSessionListHook>>
  > = () => getSessionList(params);

  const query = useQuery<
    AsyncReturnType<ReturnType<typeof useGetSessionListHook>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

export const useGetApiProgramHook = () => {
  const getApiProgram = useCustomInstance<Prog>();

  return (params?: GetApiProgramParams) => {
    return getApiProgram({ url: `/api/program`, method: "get", params });
  };
};

export const getGetApiProgramQueryKey = (params?: GetApiProgramParams) => [
  `/api/program`,
  ...(params ? [params] : []),
];

export const useGetApiProgram = <
  TData = AsyncReturnType<ReturnType<typeof useGetApiProgramHook>>,
  TError = ErrorType<void>
>(
  params?: GetApiProgramParams,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<ReturnType<typeof useGetApiProgramHook>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetApiProgramQueryKey(params);

  const getApiProgram = useGetApiProgramHook();

  const queryFn: QueryFunction<
    AsyncReturnType<ReturnType<typeof useGetApiProgramHook>>
  > = () => getApiProgram(params);

  const query = useQuery<
    AsyncReturnType<ReturnType<typeof useGetApiProgramHook>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};
