/**
 * Generated by orval v6.5.1 üç∫
 * Do not edit manually.
 * Primer backend API
 * A backend service implementing a pedagogic functional programming language.
 * OpenAPI spec version: 0.7
 */
import axios, { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "react-query";
import type {
  Uuid,
  InitialApp,
  PaginatedSession,
  GetSessionListParams,
  Prog,
  GetApiProgramParams,
} from "./model";

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

/**
 * @summary Create a new session
 */
export const createSession = (
  initialApp: InitialApp,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Uuid>> => {
  return axios.post(`/api/sessions`, initialApp, options);
};

export const useCreateSession = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof createSession>,
    TError,
    { data: InitialApp },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options || {};

  const mutationFn: MutationFunction<
    AsyncReturnType<typeof createSession>,
    { data: InitialApp }
  > = (props) => {
    const { data } = props || {};

    return createSession(data, axiosOptions);
  };

  return useMutation<
    AsyncReturnType<typeof createSession>,
    TError,
    { data: InitialApp },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * @summary List sessions
 */
export const getSessionList = (
  params?: GetSessionListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PaginatedSession>> => {
  return axios.get(`/api/sessions`, {
    params,
    ...options,
  });
};

export const getGetSessionListQueryKey = (params?: GetSessionListParams) => [
  `/api/sessions`,
  ...(params ? [params] : []),
];

export const useGetSessionList = <
  TData = AsyncReturnType<typeof getSessionList>,
  TError = AxiosError<void>
>(
  params?: GetSessionListParams,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<typeof getSessionList>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetSessionListQueryKey(params);

  const queryFn: QueryFunction<AsyncReturnType<typeof getSessionList>> = () =>
    getSessionList(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getSessionList>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const getApiProgram = (
  params?: GetApiProgramParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Prog>> => {
  return axios.get(`/api/program`, {
    params,
    ...options,
  });
};

export const getGetApiProgramQueryKey = (params?: GetApiProgramParams) => [
  `/api/program`,
  ...(params ? [params] : []),
];

export const useGetApiProgram = <
  TData = AsyncReturnType<typeof getApiProgram>,
  TError = AxiosError<void>
>(
  params?: GetApiProgramParams,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<typeof getApiProgram>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetApiProgramQueryKey(params);

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiProgram>> = () =>
    getApiProgram(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getApiProgram>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};
