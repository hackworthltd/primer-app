/**
 * Generated by orval v6.5.1 🍺
 * Do not edit manually.
 * Primer backend API
 * A backend service implementing a pedagogic functional programming language.
 * OpenAPI spec version: 0.7
 */
import { rest } from "msw";
import faker from "faker";
import type { Prog } from "./model";

export const getCreateSessionMock = () => faker.random.word();

export const getGetSessionListMock = () => ({
  items: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    name: faker.random.word(),
    id: {},
  })),
  meta: {
    totalItems: faker.datatype.number(),
    pageSize: faker.datatype.number(),
    nextPage: faker.helpers.randomize([faker.datatype.number(), undefined]),
    thisPage: faker.datatype.number(),
    firstPage: faker.datatype.number(),
    lastPage: faker.datatype.number(),
    prevPage: faker.helpers.randomize([faker.datatype.number(), undefined]),
  },
});

export const getGetApiProgramMock = () => ({
  defs: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    name: faker.random.word(),
    term: {
      childTrees: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
        () => ({ nodeId: faker.datatype.number(), label: faker.random.word() })
      ),
      nodeId: faker.datatype.number(),
      label: faker.random.word(),
    },
    type_: {
      childTrees: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(
        () => ({ nodeId: faker.datatype.number(), label: faker.random.word() })
      ),
      nodeId: faker.datatype.number(),
      label: faker.random.word(),
    },
    id: faker.datatype.number(),
  })),
  types: [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() =>
    faker.random.word()
  ),
});

export const getPrimerBackendAPIMSW = () => [
  rest.post("*/api/sessions", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getCreateSessionMock())
    );
  }),
  rest.get("*/api/sessions", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetSessionListMock())
    );
  }),
  rest.get("*/api/program", (req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetApiProgramMock())
    );
  }),
];
