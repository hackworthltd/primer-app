/**
 * Generated by orval v6.9.0 🍺
 * Do not edit manually.
 * Primer backend API
 * A backend service implementing a pedagogic functional programming language.
 * OpenAPI spec version: 0.7
 */
import {
  rest
} from 'msw'
import {
  faker
} from '@faker-js/faker'
import {
  NodeStyle
} from './model'

export const getGetApiProgramMock = () => ({modules: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({defs: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({name: faker.random.word(), term: faker.helpers.arrayElement([{body: faker.helpers.arrayElement([{contents: faker.random.word(), tag: faker.helpers.arrayElement(['TextBody'])},{contents: {childTrees: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))})), label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{childTrees: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))})), label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{childTrees: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))})), label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, tag: faker.helpers.arrayElement(['BoxBody'])},{tag: faker.helpers.arrayElement(['NoBody'])}]), childTrees: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({body: faker.helpers.arrayElement([{contents: faker.random.word(), tag: faker.helpers.arrayElement(['TextBody'])},{contents: {label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, tag: faker.helpers.arrayElement(['BoxBody'])},{tag: faker.helpers.arrayElement(['NoBody'])}]), label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{body: faker.helpers.arrayElement([{contents: faker.random.word(), tag: faker.helpers.arrayElement(['TextBody'])},{contents: {label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, tag: faker.helpers.arrayElement(['BoxBody'])},{tag: faker.helpers.arrayElement(['NoBody'])}]), label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{body: faker.helpers.arrayElement([{contents: faker.random.word(), tag: faker.helpers.arrayElement(['TextBody'])},{contents: {label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, tag: faker.helpers.arrayElement(['BoxBody'])},{tag: faker.helpers.arrayElement(['NoBody'])}]), label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))})), label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{body: faker.helpers.arrayElement([{contents: faker.random.word(), tag: faker.helpers.arrayElement(['TextBody'])},{contents: {childTrees: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))})), label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, tag: faker.helpers.arrayElement(['BoxBody'])},{tag: faker.helpers.arrayElement(['NoBody'])}]), childTrees: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({body: faker.helpers.arrayElement([{contents: faker.random.word(), tag: faker.helpers.arrayElement(['TextBody'])},{contents: {label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, tag: faker.helpers.arrayElement(['BoxBody'])},{tag: faker.helpers.arrayElement(['NoBody'])}]), label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))})), label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{body: faker.helpers.arrayElement([{contents: faker.random.word(), tag: faker.helpers.arrayElement(['TextBody'])},{contents: {childTrees: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))})), label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, tag: faker.helpers.arrayElement(['BoxBody'])},{tag: faker.helpers.arrayElement(['NoBody'])}]), childTrees: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({body: faker.helpers.arrayElement([{contents: faker.random.word(), tag: faker.helpers.arrayElement(['TextBody'])},{contents: {label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, tag: faker.helpers.arrayElement(['BoxBody'])},{tag: faker.helpers.arrayElement(['NoBody'])}]), label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))})), label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), type_: {body: faker.helpers.arrayElement([{contents: faker.random.word(), tag: faker.helpers.arrayElement(['TextBody'])},{contents: {childTrees: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))})), label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{childTrees: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))})), label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{childTrees: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))})), label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, tag: faker.helpers.arrayElement(['BoxBody'])},{tag: faker.helpers.arrayElement(['NoBody'])}]), childTrees: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({body: faker.helpers.arrayElement([{contents: faker.random.word(), tag: faker.helpers.arrayElement(['TextBody'])},{contents: {label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, tag: faker.helpers.arrayElement(['BoxBody'])},{tag: faker.helpers.arrayElement(['NoBody'])}]), label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{body: faker.helpers.arrayElement([{contents: faker.random.word(), tag: faker.helpers.arrayElement(['TextBody'])},{contents: {label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, tag: faker.helpers.arrayElement(['BoxBody'])},{tag: faker.helpers.arrayElement(['NoBody'])}]), label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{body: faker.helpers.arrayElement([{contents: faker.random.word(), tag: faker.helpers.arrayElement(['TextBody'])},{contents: {label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, tag: faker.helpers.arrayElement(['BoxBody'])},{tag: faker.helpers.arrayElement(['NoBody'])}]), label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))})), label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{body: faker.helpers.arrayElement([{contents: faker.random.word(), tag: faker.helpers.arrayElement(['TextBody'])},{contents: {childTrees: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))})), label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, tag: faker.helpers.arrayElement(['BoxBody'])},{tag: faker.helpers.arrayElement(['NoBody'])}]), childTrees: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({body: faker.helpers.arrayElement([{contents: faker.random.word(), tag: faker.helpers.arrayElement(['TextBody'])},{contents: {label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, tag: faker.helpers.arrayElement(['BoxBody'])},{tag: faker.helpers.arrayElement(['NoBody'])}]), label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))})), label: faker.random.word(), nodeId: faker.random.word(), rightChild: faker.helpers.arrayElement([{body: faker.helpers.arrayElement([{contents: faker.random.word(), tag: faker.helpers.arrayElement(['TextBody'])},{contents: {childTrees: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))})), label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, tag: faker.helpers.arrayElement(['BoxBody'])},{tag: faker.helpers.arrayElement(['NoBody'])}]), childTrees: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({body: faker.helpers.arrayElement([{contents: faker.random.word(), tag: faker.helpers.arrayElement(['TextBody'])},{contents: {label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, tag: faker.helpers.arrayElement(['BoxBody'])},{tag: faker.helpers.arrayElement(['NoBody'])}]), label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))})), label: faker.random.word(), nodeId: faker.random.word(), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))}, undefined]), style: faker.helpers.arrayElement(Object.values(NodeStyle))}})), editable: faker.datatype.boolean(), modname: {unModuleName: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.random.word()))}, types: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.random.word()))}))})

export const getGetSessionListMock = () => ({items: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: , name: faker.random.word()})), meta: {firstPage: faker.datatype.number({min: 0, max: 9223372036854776000}), lastPage: faker.datatype.number({min: 0, max: 9223372036854776000}), nextPage: faker.helpers.arrayElement([faker.datatype.number({min: 0, max: 9223372036854776000}), undefined]), pageSize: faker.datatype.number({min: 0, max: 9223372036854776000}), prevPage: faker.helpers.arrayElement([faker.datatype.number({min: 0, max: 9223372036854776000}), undefined]), thisPage: faker.datatype.number({min: 0, max: 9223372036854776000}), totalItems: faker.datatype.number({min: 0, max: 9223372036854776000})}})

export const getCreateSessionMock = () => (faker.random.word())

export const getPrimerBackendAPIMSW = () => [
rest.get('*/api/program', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiProgramMock()),
        )
      }),rest.get('*/api/sessions', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetSessionListMock()),
        )
      }),rest.post('*/api/sessions', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getCreateSessionMock()),
        )
      }),]
